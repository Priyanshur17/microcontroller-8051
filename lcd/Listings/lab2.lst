C51 COMPILER V9.60.7.0   LAB2                                                              02/21/2024 02:25:04 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LAB2
OBJECT MODULE PLACED IN .\Objects\lab2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lab2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lab2
                    -.lst) TABS(2) OBJECT(.\Objects\lab2.obj)

line level    source

   1          #include <reg51.h>
   2          #include <stdio.h>
   3          #include <stdlib.h>
   4          #include <string.h>
   5          
   6          #define LCD_DATA P2
   7          
   8          void delay_ms(unsigned int ms) {
   9   1          unsigned int i, j;
  10   1          for (i = 0; i < ms; i++)
  11   1              for (j = 0; j < 300; j++);  // Adjust this loop count based on your microcontroller's clock freque
             -ncy
  12   1      }
  13          
  14          sbit rs = P1^0;
  15          sbit rw = P1^1;
  16          sbit e  = P1^2;
  17          
  18          sbit btn0 = P3^0;
  19          sbit btn1 = P3^1;
  20          sbit btn2 = P3^2;
  21          sbit btn3 = P3^3;
  22          sbit btn4 = P3^4;
  23          sbit btn5 = P3^5;
  24          sbit btn6 = P3^6;
  25          sbit btn7 = P3^7;
  26          
  27          sbit btnPlus = P1^3;
  28          sbit btnMinus = P1^4;
  29          sbit btnMultiply = P1^5;
  30          sbit btnDivide = P1^6;
  31          sbit btnEquals = P1^7;
  32          
  33          void LCD_command(unsigned char command) {
  34   1          rs = 0; // Selecting command
  35   1          rw = 0; // We are writing to the LCD
  36   1          LCD_DATA = command; // Sending the command
  37   1          e = 1;
  38   1          delay_ms(1);
  39   1          e = 0;
  40   1          delay_ms(1);
  41   1      }
  42          
  43          void LCD_data(unsigned char dat) {
  44   1          rs = 1; // Selecting 
  45   1          rw = 0; // We are writing to the LCD
  46   1          LCD_DATA = dat; // Sending the
  47   1          e = 1;
  48   1          delay_ms(1);
  49   1          e = 0;
  50   1          delay_ms(1);
  51   1      }
  52          
  53          void LCD_init() {
C51 COMPILER V9.60.7.0   LAB2                                                              02/21/2024 02:25:04 PAGE 2   

  54   1          LCD_command(0x38); // 2 lines, 5x8 matrix
  55   1          LCD_command(0x0E); // Display on, cursor blinking
  56   1          LCD_command(0x01); // Clear display
  57   1          delay_ms(10);
  58   1          LCD_command(0x06); // Increment cursor
  59   1      }
  60          
  61          void LCD_clear() {
  62   1          LCD_command(0x01); // Clear display
  63   1          delay_ms(10);
  64   1      }
  65          
  66          void LCD_print(char *str) {
  67   1          LCD_clear(); // Clear the display before printing
  68   1          while (*str != '\0') {
  69   2              LCD_data(*str);
  70   2              str++;
  71   2          }
  72   1      }
  73          
  74          void LCD_print_number(int num) {
  75   1          char buffer[16];
  76   1          sprintf(buffer, "%d", num);
  77   1          LCD_print(buffer);
  78   1      }
  79          
  80          void main() {
  81   1          unsigned char operand1[3] = "";
  82   1          unsigned char operand2[3] = "";
  83   1          char operator = '\0';
  84   1          int result = 0;
  85   1      
  86   1          LCD_init();
  87   1      
  88   1          while (1) {
  89   2              if (btn0 == 1) {
  90   3                  if (strlen(operand1) < 2) {
  91   4                      strcat(operand1, "0");
  92   4                      LCD_print(operand1);
  93   4                  }
  94   3              }
  95   2      
  96   2              if (btn1 == 1) {
  97   3                  if (strlen(operand1) < 2) {
  98   4                      strcat(operand1, "1");
  99   4                      LCD_print(operand1);
 100   4                  }
 101   3              }
 102   2      
 103   2              // Repeat this pattern for btn2 to btn7
 104   2      
 105   2              if (btnPlus == 1 || btnMinus == 1 || btnMultiply == 1 || btnDivide == 1) {
 106   3                  operator = btnPlus == 1 ? '+' : btnMinus == 1 ? '-' : btnMultiply == 1 ? '*' : '/';
 107   3                  LCD_print(&operator);
 108   3              }
 109   2      
 110   2              if (btn2 == 1) {
 111   3                  if (strlen(operand2) < 2) {
 112   4                      strcat(operand2, "2");
 113   4                      LCD_print(operand2);
 114   4                  }
 115   3              }
C51 COMPILER V9.60.7.0   LAB2                                                              02/21/2024 02:25:04 PAGE 3   

 116   2      
 117   2              // Repeat this pattern for btn3 to btn7
 118   2      
 119   2              if (btnEquals == 1 && operator != '\0') {
 120   3                  int num1 = atoi(operand1);
 121   3                  int num2 = atoi(operand2);
 122   3      
 123   3                  switch (operator) {
 124   4                      case '+':
 125   4                          result = num1 + num2;
 126   4                          break;
 127   4                      case '-':
 128   4                          result = num1 - num2;
 129   4                          break;
 130   4                      case '*':
 131   4                          result = num1 * num2;
 132   4                          break;
 133   4                      case '/':
 134   4                          if (num2 != 0) {
 135   5                              result = num1 / num2;
 136   5                          } else {
 137   5                              LCD_clear();
 138   5                              LCD_print("Error: Division by 0");
 139   5                              while (1); // End the program or handle the error as needed
 140   5                          }
 141   4                          break;
 142   4                  }
 143   3      
 144   3                  LCD_print("=");
 145   3                  LCD_print_number(result);
 146   3                  break; // End the program after displaying the result
 147   3              }
 148   2          }
 149   1      
 150   1          while (1); // Infinite loop to keep the program running
 151   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    556    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
